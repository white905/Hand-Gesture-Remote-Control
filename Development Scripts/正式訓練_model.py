# -*- coding: utf-8 -*-
"""正式訓練_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GNtL4FvpEMh_mj2ZHNIbg17PQzrVxHLN

## **Pre-processing**
"""

# Commented out IPython magic to ensure Python compatibility.
# %env KERAS_BACKEND=tensorflow
# %matplotlib inline

import numpy as np
import tensorflow as tf
import pandas as pd
from math import sqrt
from keras.models import Sequential
from keras.layers import Dense, Activation
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.optimizers import SGD

tf.test.gpu_device_name()

# 變數調整區
mode_type = "數字"
node_file = 'node_file_2+9+12+13+生物+物理_number'
data_num = 6 * 11 * 1000 #人數 * 手勢數 * 單手勢資料數

"""## **Training Data**"""

from google.colab import drive

drive.mount('/content/drive')

file_npz = np.load(f'/content/drive/MyDrive/Happy/新版手勢圖片儲存/{mode_type}/{node_file}.npz', encoding='bytes')

from google.colab import drive
drive.mount('/content/drive')

"""## **DataSet**"""

x_train = file_npz['x']
y_train = file_npz['y']

"""## **Model**"""

#                           21(節點數)*2(x,y)
x_train = x_train.reshape(data_num, 42)

# y_train = to_categorical(y_train, 26)
# y_test = to_categorical(y_test, 26)

x_train.shape

y_train[1].shape

model = Sequential()

model.add(Dense(1000, input_dim=42, activation='relu'))
model.add(Dense(1000, activation='relu'))
model.add(Dense(1000, activation='relu'))
model.add(Dense(100, activation='softmax'))

"""## **Combine**"""

#             loss_function    Gradient_Descent
model.compile(loss='mse', optimizer=SGD(learning_rate=0.3), metrics=['accuracy'])

model.summary()

"""## **Train**"""

model.fit(x_train, y_train, batch_size=100, epochs=40)

"""## **Test**"""

# Commented out IPython magic to ensure Python compatibility.
from keras.models import load_model
# %cd '/content/drive/MyDrive/Happy/module_save'
model = load_model('0220_2+9-english_lr=1-2-100-40.h5')

file_tester = np.load('/content/drive/MyDrive/Happy/新版手勢圖片/英文/男-陳士聿/file_a.npz', encoding='bytes')

x_test = file_tester['x']
y_test = file_tester['y']

x_test.shape

x_test = x_test.reshape(1000, 42)

x_test.shape

score = model.evaluate(x_test, y_test)

"""#**Save**"""

# Commented out IPython magic to ensure Python compatibility.
# %cd '/content/drive/MyDrive/Happy/module_save'

model.save('0320_2+9+12+13+生物+物理-number_lr=0.5-2-100-40.h5')